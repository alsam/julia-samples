precompile(Tuple{typeof(Base.__precompile__)})
precompile(Tuple{Printf.var"#@printf", LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Printf._printf), String, Symbol, String, Tuple{Symbol}})
precompile(Tuple{typeof(Base.tail), Tuple{String, Symbol, Symbol}})
precompile(Tuple{typeof(Printf._printf), String, Symbol, String, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.tail), Tuple{String, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Printf._printf), String, Symbol, String, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.tail), Tuple{String, Expr, Expr}})
precompile(Tuple{typeof(Printf._printf), String, Symbol, String, Tuple{Expr, Expr}})
precompile(Tuple{Test.var"#@test", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), Any, Any})
precompile(Tuple{typeof(Test.get_test_result), Any, Any})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
precompile(Tuple{typeof(Base.tail), Tuple{String, Symbol, Expr, Expr}})
precompile(Tuple{typeof(Printf._printf), String, Symbol, String, Tuple{Symbol, Expr, Expr}})
precompile(Tuple{typeof(Base.tail), Tuple{Symbol, String, Symbol, Expr, Expr}})
precompile(Tuple{typeof(Printf._printf), String, Expr, String, Tuple{Symbol, Expr, Expr}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DocOpt.Option}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DocOpt.Pattern}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{T, N} where N where T}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DocOpt.Required}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DocOpt.Either}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DocOpt.Argument}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Int64, Bool}}})
precompile(Tuple{Base.var"##s91#155", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:initially_zero,), Tuple{Bool}}}, Type{NamedTuple{(:abstol, :maxiter, :log), Tuple{Float64, Int64, Bool}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:abstol, :reltol, :maxiter, :statevars), Tuple{Float64, Float64, Int64, IterativeSolvers.CGStateVariables{Float64, SparseArrays.SparseVector{Float64, Int64}}}}}, Type{NamedTuple{(:initially_zero,), Tuple{Bool}}}})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, SparseArrays.HigherOrderFns.SparseVecStyle})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{SuiteSparse.CHOLMOD.C_Sparse{Float64}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{SuiteSparse.CHOLMOD.C_Factor{Float64}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Complex{Float64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{Int64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{SuiteSparse.CHOLMOD.C_Dense{Float64}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Ptr{Nothing}, Base.InterpreterIP}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{UInt64, Main.Pos}}})
precompile(Tuple{typeof(Base.split), Base.SubString{String}, String})
precompile(Tuple{typeof(DocOpt.formal_usage), Base.SubString{String}})
precompile(Tuple{typeof(Base.findnext), typeof(Base.Unicode.isspace), Base.SubString{String}, Int64})
precompile(Tuple{Base.var"##sprint#355", Nothing, Int64, typeof(Base.sprint), Function, Array{AbstractString, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{AbstractString, 1}, Char})
precompile(Tuple{Type{DocOpt.Tokens}, String, Type{T} where T})
precompile(Tuple{typeof(Base.vect), Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, String, Vararg{String, N} where N})
precompile(Tuple{Type{Array{Union{Nothing, String}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, String}, 1}, Tuple{Nothing, String, String, String}})
precompile(Tuple{typeof(Base.append!), Array{DocOpt.Pattern, 1}, Array{DocOpt.Option, 1}})
precompile(Tuple{Type{DocOpt.Required}, Array{DocOpt.Either, 1}})
precompile(Tuple{typeof(Base.vect), DocOpt.Required})
precompile(Tuple{typeof(Base.append!), Array{DocOpt.Pattern, 1}, Array{DocOpt.Required, 1}})
precompile(Tuple{Type{DocOpt.Optional}, Array{DocOpt.Either, 1}})
precompile(Tuple{typeof(Base.vect), DocOpt.Optional})
precompile(Tuple{typeof(Base.allocatedinline), Type{DocOpt.Optional}})
precompile(Tuple{typeof(Base.append!), Array{DocOpt.Pattern, 1}, Array{DocOpt.Optional, 1}})
precompile(Tuple{Type{DocOpt.Optional}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.append!), Array{DocOpt.Pattern, 1}, Array{DocOpt.Argument, 1}})
precompile(Tuple{Type{DocOpt.Required}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(DocOpt.flat), DocOpt.Required, Array{DataType, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{DocOpt.Pattern, 1}, DocOpt.var"#7#8"{Array{DataType, 1}}}})
precompile(Tuple{DocOpt.var"#7#8"{Array{DataType, 1}}, DocOpt.Either})
precompile(Tuple{DocOpt.var"#7#8"{Array{DataType, 1}}, DocOpt.Required})
precompile(Tuple{DocOpt.var"#7#8"{Array{DataType, 1}}, DocOpt.Option})
precompile(Tuple{typeof(Base._array_for), Type{Array{DocOpt.Option, 1}}, Array{DocOpt.Pattern, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{DocOpt.Option, 1}, 1}, Array{DocOpt.Option, 1}, Base.Generator{Array{DocOpt.Pattern, 1}, DocOpt.var"#7#8"{Array{DataType, 1}}}, Int64})
precompile(Tuple{Base.var"#reduce##kw", NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}, typeof(Base.reduce), Function, Array{Array{DocOpt.Option, 1}, 1}})
precompile(Tuple{Base.var"##mapfoldl#204", Base.Iterators.Pairs{Symbol, Array{DocOpt.Pattern, 1}, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}}, typeof(Base.mapfoldl), Function, Function, Array{Array{DocOpt.Option, 1}, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.vcat), NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}, Array{Array{DocOpt.Option, 1}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{DocOpt.Pattern, 1}}, Array{DocOpt.Pattern, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{DocOpt.Pattern, 1}, 1}, Array{DocOpt.Pattern, 1}, Base.Generator{Array{DocOpt.Pattern, 1}, DocOpt.var"#7#8"{Array{DataType, 1}}}, Int64})
precompile(Tuple{Base.var"#reduce##kw", NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}, typeof(Base.reduce), Function, Array{Array{DocOpt.Pattern, 1}, 1}})
precompile(Tuple{Base.var"##mapfoldl#204", Base.Iterators.Pairs{Symbol, Array{DocOpt.Pattern, 1}, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}}, typeof(Base.mapfoldl), Function, Function, Array{Array{DocOpt.Pattern, 1}, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.vcat), NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}, Array{Array{DocOpt.Pattern, 1}, 1}})
precompile(Tuple{DocOpt.var"#7#8"{Array{DataType, 1}}, DocOpt.Optional})
precompile(Tuple{DocOpt.var"#7#8"{Array{DataType, 1}}, DocOpt.Argument})
precompile(Tuple{Type{Base.Set{T} where T}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.push!), Base.Set{DocOpt.Pattern}, DocOpt.Option})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(Base.isequal), DocOpt.Option, DocOpt.Option})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Nothing})
precompile(Tuple{typeof(Base.iterate), Array{DocOpt.Pattern, 1}})
precompile(Tuple{DocOpt.var"#35#37", DocOpt.Argument})
precompile(Tuple{typeof(Base.in), Nothing, Array{String, 1}})
precompile(Tuple{typeof(DocOpt.flat), DocOpt.Required, Array{Any, 1}})
precompile(Tuple{typeof(Base.in), Type{T} where T, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{DocOpt.Pattern, 1}, DocOpt.var"#7#8"{Array{Any, 1}}}})
precompile(Tuple{DocOpt.var"#7#8"{Array{Any, 1}}, DocOpt.Either})
precompile(Tuple{DocOpt.var"#7#8"{Array{Any, 1}}, DocOpt.Required})
precompile(Tuple{DocOpt.var"#7#8"{Array{Any, 1}}, DocOpt.Option})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{DocOpt.Option, 1}, 1}, Array{DocOpt.Option, 1}, Base.Generator{Array{DocOpt.Pattern, 1}, DocOpt.var"#7#8"{Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{DocOpt.Pattern, 1}, 1}, Array{DocOpt.Pattern, 1}, Base.Generator{Array{DocOpt.Pattern, 1}, DocOpt.var"#7#8"{Array{Any, 1}}}, Int64})
precompile(Tuple{DocOpt.var"#7#8"{Array{Any, 1}}, DocOpt.Optional})
precompile(Tuple{DocOpt.var"#7#8"{Array{Any, 1}}, DocOpt.Argument})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{DocOpt.Pattern, 1}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{DocOpt.Pattern, 1}, 1}, Array{DocOpt.Argument, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Array{DocOpt.Pattern, 1}, DocOpt.var"#7#8"{Array{Any, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{DocOpt.Argument, 1}}, Array{DocOpt.Pattern, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{DocOpt.Argument, 1}, 1}, Array{DocOpt.Argument, 1}, Base.Generator{Array{DocOpt.Pattern, 1}, DocOpt.var"#7#8"{Array{Any, 1}}}, Int64})
precompile(Tuple{Base.var"#reduce##kw", NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}, typeof(Base.reduce), Function, Array{Array{DocOpt.Argument, 1}, 1}})
precompile(Tuple{Base.var"##mapfoldl#204", Base.Iterators.Pairs{Symbol, Array{DocOpt.Pattern, 1}, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}}, typeof(Base.mapfoldl), Function, Function, Array{Array{DocOpt.Argument, 1}, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.vcat), NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}, Array{Array{DocOpt.Argument, 1}, 1}})
precompile(Tuple{Base.var"#reduce##kw", NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}, typeof(Base.reduce), Function, Array{Array{T, 1} where T, 1}})
precompile(Tuple{Base.var"##mapfoldl#204", Base.Iterators.Pairs{Symbol, Array{DocOpt.Pattern, 1}, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}}, typeof(Base.mapfoldl), Function, Function, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.vcat), NamedTuple{(:init,), Tuple{Array{DocOpt.Pattern, 1}}}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.vcat), Array{DocOpt.Pattern, 1}, Array{DocOpt.Argument, 1}})
precompile(Tuple{typeof(Base.unique), Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.in), DocOpt.Option, Base.Set{DocOpt.Pattern}})
precompile(Tuple{typeof(Base.in), DocOpt.Argument, Base.Set{DocOpt.Pattern}})
precompile(Tuple{typeof(Base.isequal), DocOpt.Argument, DocOpt.Option})
precompile(Tuple{typeof(Base.push!), Base.Set{DocOpt.Pattern}, DocOpt.Argument})
precompile(Tuple{typeof(DocOpt.fix_identities), DocOpt.Either, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(DocOpt.fix_identities), DocOpt.Required, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.isequal), DocOpt.Option})
precompile(Tuple{typeof(Base.findfirst), Function, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), DocOpt.Option}, Array{DocOpt.Pattern, 1}, Int64})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), DocOpt.Option}, DocOpt.Option})
precompile(Tuple{typeof(Base.:(==)), String, Base.SubString{String}})
precompile(Tuple{typeof(DocOpt.fix_identities), DocOpt.Optional, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.isequal), DocOpt.Argument})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), DocOpt.Argument}, Array{DocOpt.Pattern, 1}, Int64})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), DocOpt.Argument}, DocOpt.Option})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), DocOpt.Argument}, DocOpt.Argument})
precompile(Tuple{typeof(Base.map), Function, Array{DataType, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, DocOpt.var"#15#17"{Array{DocOpt.Pattern, 1}}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Missing}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, Bool}}})
precompile(Tuple{typeof(Base.collect_similar), Array{DataType, 1}, Base.Generator{Array{DataType, 1}, DocOpt.var"#15#17"{Array{DocOpt.Pattern, 1}}}})
precompile(Tuple{DocOpt.var"#15#17"{Array{DocOpt.Pattern, 1}}, Type{T} where T})
precompile(Tuple{typeof(Base._similar_for), Array{DocOpt.Pattern, 1}, Type{DataType}, Base.Generator{Array{DocOpt.Pattern, 1}, typeof(typeof)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{Array{DocOpt.Pattern, 1}, typeof(typeof)}, Int64})
precompile(Tuple{typeof(Base.in), Type{T} where T, Array{DataType, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataType, 1}, Type{Bool}, Base.Generator{Array{DataType, 1}, DocOpt.var"#15#17"{Array{DocOpt.Pattern, 1}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{DataType, 1}, DocOpt.var"#15#17"{Array{DocOpt.Pattern, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.any), Array{Bool, 1}})
precompile(Tuple{typeof(Base.filter), DocOpt.var"#16#18"{Array{DataType, 1}}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.first), Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.isequal), DocOpt.Required})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), DocOpt.Required}, Array{DocOpt.Pattern, 1}, Int64})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), DocOpt.Required}, DocOpt.Required})
precompile(Tuple{typeof(Base.:(==)), DocOpt.Either, DocOpt.Either})
precompile(Tuple{typeof(Base.:(==)), DocOpt.Required, DocOpt.Required})
precompile(Tuple{typeof(Base.:(==)), DocOpt.Optional, DocOpt.Optional})
precompile(Tuple{typeof(Base.splice!), Array{DocOpt.Pattern, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), DocOpt.Required, Symbol})
precompile(Tuple{typeof(Base.isequal), DocOpt.Either})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), DocOpt.Either}, Array{DocOpt.Pattern, 1}, Int64})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), DocOpt.Either}, DocOpt.Either})
precompile(Tuple{typeof(Base.vcat), Array{DocOpt.Required, 1}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.vect), DocOpt.Option})
precompile(Tuple{typeof(Base.vcat), Array{DocOpt.Option, 1}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.isequal), DocOpt.Optional})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), DocOpt.Optional}, Array{DocOpt.Pattern, 1}, Int64})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), DocOpt.Optional}, DocOpt.Optional})
precompile(Tuple{typeof(Base.getproperty), DocOpt.Optional, Symbol})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), DocOpt.Optional}, DocOpt.Option})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), DocOpt.Optional}, DocOpt.Argument})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{DocOpt.Pattern, 1}, 1}, Array{DocOpt.Pattern, 1}, Base.Generator{Array{DocOpt.Pattern, 1}, DocOpt.var"#9#12"}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{DocOpt.Pattern, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.filter), DocOpt.var"#10#13"{Array{DocOpt.Pattern, 1}}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base._count), Function, Array{DocOpt.Pattern, 1}, Base.Colon})
precompile(Tuple{typeof(Base._simple_count), DocOpt.var"#11#14"{DocOpt.Option}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{DocOpt.var"#11#14"{DocOpt.Option}, DocOpt.Option})
precompile(Tuple{typeof(Base._simple_count), DocOpt.var"#11#14"{DocOpt.Argument}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{DocOpt.var"#11#14"{DocOpt.Argument}, DocOpt.Argument})
precompile(Tuple{DocOpt.var"#11#14"{DocOpt.Argument}, DocOpt.Option})
precompile(Tuple{DocOpt.var"#11#14"{DocOpt.Option}, DocOpt.Argument})
precompile(Tuple{typeof(DocOpt.patternmatch), DocOpt.Either, Array{DocOpt.Pattern, 1}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(DocOpt.patternmatch), DocOpt.Option, Array{DocOpt.Pattern, 1}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(DocOpt.name), DocOpt.Argument})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Array{DocOpt.Pattern, 1}, Array{DocOpt.Pattern, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Array{DocOpt.Pattern, 1}, Array{DocOpt.Pattern, 1}}, Int64, Int64})
precompile(Tuple{typeof(DocOpt.patternmatch), DocOpt.Optional, Array{DocOpt.Pattern, 1}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(DocOpt.patternmatch), DocOpt.Argument, Array{DocOpt.Pattern, 1}, Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.vect), DocOpt.Argument})
precompile(Tuple{DocOpt.var"#5#6"{DocOpt.Argument}, DocOpt.Argument})
precompile(Tuple{typeof(Base.length), Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.isempty), Array{DocOpt.Pattern, 1}})
precompile(Tuple{typeof(Base.getproperty), DocOpt.Option, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Bool, Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Array{DocOpt.Pattern, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Nothing, Base.SubString{String}})
precompile(Tuple{typeof(Base.getproperty), DocOpt.Argument, Symbol})
precompile(Tuple{typeof(Main.read_input), String})
precompile(Tuple{typeof(Base.parse), Type{UInt64}, Base.SubString{String}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.getindex), Array{Base.SubString{String}, 1}, UInt64})
precompile(Tuple{typeof(Base.parse), Type{Float64}, Base.SubString{String}})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), SparseArrays.SparseVector{Float64, Int64}, Float64, UInt64})
precompile(Tuple{Type{IterativeSolvers.ConvergenceHistory{true, Nothing}}, Int64, Int64, Int64, Nothing, Bool, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(IterativeSolvers.reserve!), IterativeSolvers.ConvergenceHistory{true, Nothing}, Symbol, Int64})
precompile(Tuple{typeof(Base.push!), IterativeSolvers.ConvergenceHistory{true, Nothing}, Symbol, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{SparseArrays.SparseVector{Float64, Int64}, IterativeSolvers.ConvergenceHistory{true, Nothing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{SparseArrays.SparseVector{Float64, Int64}, IterativeSolvers.ConvergenceHistory{true, Nothing}}, Int64, Int64})
precompile(Tuple{typeof(SparseArrays.ftranspose), SparseArrays.SparseMatrixCSC{Float64, Int64}, Function, Type{Float64}})
precompile(Tuple{typeof(SparseArrays._distributevals_halfperm!), SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Base.UnitRange{Int64}, SparseArrays.var"#5#6"})
precompile(Tuple{typeof(Base.:(\)), SuiteSparse.CHOLMOD.Factor{Float64}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{typeof(Base.sign), Float64})
precompile(Tuple{typeof(Base.convert), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.adjoint), SuiteSparse.CHOLMOD.Factor{Float64}})
precompile(Tuple{typeof(Base.:(\)), LinearAlgebra.Adjoint{Float64, SuiteSparse.CHOLMOD.Factor{Float64}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.zeros), Type{Float64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(SuiteSparse.CHOLMOD.free!), SuiteSparse.CHOLMOD.Dense{Float64}})
precompile(Tuple{typeof(SuiteSparse.CHOLMOD.free!), SuiteSparse.CHOLMOD.Sparse{Float64}})
precompile(Tuple{typeof(LinearAlgebra.norm), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{Base.var"#sortperm##kw", NamedTuple{(:rev,), Tuple{Bool}}, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Base.Sort.var"##sortperm#11", Base.Sort.QuickSortAlg, Function, Function, Bool, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.:(*)), SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseVector{Float64, Int64}})
precompile(Tuple{typeof(Base.:(-)), SparseArrays.SparseVector{Float64, Int64}, SparseArrays.SparseVector{Float64, Int64}})
precompile(Tuple{typeof(LinearAlgebra.norm), SparseArrays.SparseVector{Float64, Int64}})
precompile(Tuple{typeof(Test.do_test), Test.ExecutionResult, Any})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getproperty), IterativeSolvers.ConvergenceHistory{true, Nothing}, Symbol})
precompile(Tuple{typeof(Base.string), String, IterativeSolvers.ConvergenceHistory{true, Nothing}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, IterativeSolvers.ConvergenceHistory{true, Nothing}})
precompile(Tuple{typeof(Base.getindex), SparseArrays.SparseVector{Float64, Int64}, UInt64})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Main.Pad, 1}})
precompile(Tuple{typeof(Base.length), Array{Main.Pad, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.print), String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.TTY, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(SuiteSparse.CHOLMOD.free!), SuiteSparse.CHOLMOD.Factor{Float64}})
precompile(Tuple{typeof(Main.read_input), String})
